import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder

# Load the training data
train_data = pd.read_csv('titanikData.csv')

# One-hot encoding of categorical variables for training data
encoder = OneHotEncoder()
encoded_features = encoder.fit_transform(train_data[['pclass', 'age', 'gender']]).toarray()
train_data_encoded = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(['pclass', 'age', 'gender']))
train_data_encoded['survived'] = train_data['survived'].map({'yes': 1, 'no': 0})  # Convert to numeric if needed

# Load the test data with predefined column names
test_data = pd.read_csv('titanikTest.csv', names=['pclass', 'age', 'gender', 'survived'], header=0)

print("Training data columns:", train_data.columns.tolist())
print("Test data columns:", test_data.columns.tolist())

def bootstrap_samples(data, n_samples):
    samples = [data.sample(n=len(data), replace=True) for _ in range(n_samples)]
    return samples

def build_stumps(data, label):
    trees = []
    for sample in bootstrap_samples(data, 100):
        stump = DecisionTreeClassifier(max_depth=1)
        features = sample.drop(columns=[label])
        labels = sample[label]
        stump.fit(features, labels)
        trees.append(stump)
    return trees

# Encode the test data
encoded_test_features = encoder.transform(test_data[['pclass', 'age', 'gender']]).toarray()
test_data_encoded = pd.DataFrame(encoded_test_features, columns=encoder.get_feature_names_out(['pclass', 'age', 'gender']))
test_data_encoded['survived'] = test_data['survived'].map({'yes': 1, 'no': 0})

# Prediction and evaluation
def majority_voting(trees, data):
    predictions = [tree.predict(data.drop(columns=['survived'])) for tree in trees]
    predictions = np.array(predictions).T
    majority_vote = [np.bincount(sample.astype(int)).argmax() for sample in predictions]
    return majority_vote

def evaluate(predictions, labels):
    accuracy = np.mean(predictions == labels)
    return accuracy

trees = build_stumps(train_data_encoded, 'survived')
test_predictions = majority_voting(trees, test_data_encoded)
test_accuracy = evaluate(test_predictions, test_data_encoded['survived'])
print(f'Accuracy: {test_accuracy * 100:.2f}%')
